<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [

<!ENTITY RFC2119 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2360 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2360.xml">
<!ENTITY RFC2629 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC5226 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
                    ]>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="std" docName="rfc1" ipr="playgroundStd_v1_0" number="1">
	<front>
		<title abbrev="PRFC's"> CRAP Request For Comments</title>
		<author fullname="Jacob Flynn" initials="J. F." role="editor" surname="Flynn">
			<organization>JHU Network Security Fall 2019</organization>
			<address>
				<postal>
					<street>JHU 160 Malone Hall/3400 North Charles St.</street>
					<city>Baltimore</city>
					<region>MD</region>
					<code>21218</code>
					<country>USA</country>
				</postal>
				<phone></phone>
				<email>hflynn22@jhu.edu</email>
			</address>
		</author>
		<date year="2019" />
		<area>General</area>
		<workgroup>Playground Experiment Director</workgroup>
		<keyword>CRAP</keyword>
		<abstract>
			<t>
                                The CRAP (CRyptographically Awesome Protocol) is designed to give students
                                and researchers a layout to implement a
                                cryptographic protocol designed to provide communications security over a computer network. This PRFC specifies the
                                protocol for exchange of information necessary
                                to create a secured cryptographic protocol layer over Playground.</t>
		</abstract>
	</front>
	<middle>
		<section title="Introduction">
			<t>This document aims to provide a complete and
                            unified protocol for interfacing with the Playground
                            system, for the purposes of creating secured cryptographic layer.
                            This document outlines the process of creating a
                            handshake between the client and the server, and
                            specifies associated packet definitions for such
                            purpose.</t>
			<section title="Requirements Language">
				<t>The key words "MUST", "MUST NOT",
                                    "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
                                    "SHOULD NOT", "RECOMMENDED", "MAY", and
                                    "OPTIONAL" in this document are to be
                                    interpreted as described in 
					<xref
                                    target="RFC2119">RFC 2119</xref>.
				</t>
			</section>
		</section>
		<section title="Outline of Interface">
			<section title="Handshake Protocol">
				<t>The CRAP Handshake protocol MUST
                                    function in the following manner. The agent that sends the initial packet will be
                                    referred to as A, and the receiving agent will be referred to as B. For this protocol, we rely
                                    on the 'cryptography' module (specifically, cryptography.hazmat.primitives.asymmetric).
                                    We will also be using OpenSSL (to install, run pip install pyopenssl) for the certificate generation.
                                    For our key exchange protocol, we will use Diffie Hellman Key Exchange Protocol. Our signature scheme will use RSA.
                                        </t>
				<t>
					<list style="numbers">
						<t>A will generate a Diffie Hellman parameter with generator of 2, key size of 2048, and default backend to create a secret key(privkA) and public key (pubkA). A will also generate a certificate (certA) and will in turn generate a signing key (signkA). With this signing key, A will sign pubkA to generate a signature (sigA). The contents of the certificate are not important at the current time, but in the future will include A's Playground address. A will send a HandshakePacket to B with status set to NOT_STARTED, 'param' set to its generated Diffie-Hellman parameters, 'pk' set to pubkA, 'signature' set to sigA, and 'cert' set to certA. </t>
						<t>Upon receiving the HandshakePacket, B will verify the signature received from A. If verification fails, B sends A a HandshakePacket with 'status' ERROR and drops the connection. If verification passes, B generates its own public key (pubkB) and secret key (privkB). B can now also compute the shared secret using pubkA and privkB. B will also generate its own certificate (certB) and will in turn generate its own signing key (signkB). With this signing key, B will sign pubkB to generate a signature (sigB). B then sends over HandshakePacket with 'status' set to SUCCESS, 'pk' set to pubkB, 'cert' set to certB, and 'signature' set to sigB. </t>
						<t>Upon receiving the HandshakePacket from B, A verifies the signature. </t>
						<t>If A fails to verify the certificate from B, A sends a HandshakePacket with 'status' set to ERROR to B and drops the connection. </t>
						<t>If verification passes, A can now compute the shared secret, given privkA and pubkB. A sends a HandshakePacket to B with 'status' set to SUCCESS. </t>
						<t> The handshake is now complete</t>
					</list>
				</t>
			</section>
		</section>
		<section title="Packet Definitions">
			<t>In this section we provide the REQUIRED packet definitions.</t>
			<t>
				<figure>
					<artwork>
						<![CDATA[
    class CrapPacketType(PacketType):
        DEFINITION_IDENTIFIER = "crap"
        DEFINITION_VERSION = "1.0"

   class HandshakePacket(CrapPacketType):
        DEFINITION_IDENTIFIER = "crap.handshakepacket"
        DEFINITION_VERSION = "1.0"
        
        NOT_STARTED = 0
        SUCCESS     = 1
        ERROR       = 2

        FIELDS = [
            ("params", BUFFER({Optional:True})),
            ("status", UINT8),
            ("signature", BUFFER({Optional:True})),
            ("pk", BUFFER({Optional:True})),
            ("cert", BUFFER({Optional:True}))
        ]

    class DataPacket(CrapPacketType):
        DEFINITION_IDENTIFIER = "crap.datapacket"
        DEFINITION_VERSION = "1.0"

        FIELDS = [
            ("data", BUFFER),
            ("signature", BUFFER),
        ]
                   ]]>
					</artwork>
				</figure>
			</t>
		</section>
	</middle>
	<back>
		<references title="Normative References">
			<!--?rfc include="http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
                                &RFC2119;

                                
			<!--?rfc include="http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2360.xml"?-->
                                &RFC2360;

                            
		</references>
	</back>
</rfc>